version: "3.9"
services:
  db:
    image: pgvector/pgvector:pg16
    container_name: concurse-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-concurse}
      POSTGRES_USER: ${POSTGRES_USER:-concurse}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-concurse}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-concurse} -d ${POSTGRES_DB:-concurse}"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7
    container_name: concurse-redis
    ports:
      - "6379:6379"

  minio:
    image: minio/minio:latest
    container_name: concurse-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio123}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data

  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: concurse-api
    env_file: .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET: ${S3_BUCKET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ALLOW_ORIGINS: ${ALLOW_ORIGINS}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started

  worker:
    build:
      context: ./apps/worker
      dockerfile: Dockerfile
    container_name: concurse-worker
    env_file: .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET: ${S3_BUCKET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: concurse-web
    env_file: .env
    environment:
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_started

volumes:
  db_data:
  minio_data: